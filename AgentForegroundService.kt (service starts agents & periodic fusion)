package io.ennovatex.sentineledge.agents

import android.app.Notification
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.Service
import android.content.Intent
import android.os.*
import androidx.core.app.NotificationCompat
import io.ennovatex.sentineledge.R
import kotlinx.coroutines.*

class AgentForegroundService : Service() {
    private val scope = CoroutineScope(SupervisorJob() + Dispatchers.Default)
    private lateinit var agentManager: AgentManager
    private lateinit var fusion: RiskFusion

    override fun onCreate() {
        super.onCreate()
        createNotificationChannel()
        startForeground(1, buildNotification("SentinelEdge running"))

        agentManager = AgentManager(applicationContext)
        fusion = RiskFusion(applicationContext, agentManager)

        // Start agent sampling loops
        agentManager.startAll()

        // Periodic fusion + policy check
        scope.launch {
            while (isActive) {
                val risk = fusion.computeRisk()
                PolicyEngine(applicationContext).applyPolicy(risk)
                delay(1000L) // run fusion every second (tunable)
            }
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        scope.cancel()
        agentManager.stopAll()
    }

    override fun onBind(intent: Intent?): IBinder? = null

    private fun buildNotification(text: String): Notification {
        return NotificationCompat.Builder(this, "sentinel_channel")
            .setContentTitle("SentinelEdge")
            .setContentText(text)
            .setSmallIcon(R.drawable.ic_launcher_foreground)
            .build()
    }

    private fun createNotificationChannel() {
        val nm = getSystemService(NotificationManager::class.java)
        nm?.createNotificationChannel(NotificationChannel("sentinel_channel", "Sentinel Edge", NotificationManager.IMPORTANCE_LOW))
    }
}
